/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "./core";
import * as AbvthecityWeatherGov from "./api/index";
import * as stream from "stream";
export declare namespace AbvthecityWeatherGovClient {
    interface Options {
        environment: core.Supplier<string>;
        userAgent: core.Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class AbvthecityWeatherGovClient {
    protected readonly _options: AbvthecityWeatherGovClient.Options;
    constructor(_options: AbvthecityWeatherGovClient.Options);
    /**
     * Returns all currently active alerts
     *
     * @param {AbvthecityWeatherGov.AlertsActiveRequest} request
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.alertsActive()
     */
    alertsActive(request?: AbvthecityWeatherGov.AlertsActiveRequest, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.AlertCollectionGeoJson>;
    /**
     * Returns active alerts for the given area (state or marine area)
     *
     * @param {AbvthecityWeatherGov.AreaCode} area - State/area ID
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.alertsActiveArea("AL")
     */
    alertsActiveArea(area: AbvthecityWeatherGov.AreaCode, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.AlertCollectionGeoJson>;
    /**
     * Returns info on the number of active alerts
     *
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.alertsActiveCount()
     */
    alertsActiveCount(requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.AlertsActiveCountResponse>;
    /**
     * Returns active alerts for the given marine region
     *
     * @param {AbvthecityWeatherGov.MarineRegionCode} region - Marine region ID
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.alertsActiveRegion("AL")
     */
    alertsActiveRegion(region: AbvthecityWeatherGov.MarineRegionCode, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.AlertCollectionGeoJson>;
    /**
     * Returns active alerts for the given NWS public zone or county
     *
     * @param {AbvthecityWeatherGov.NwsZoneId} zoneId - NWS public zone/county identifier
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.alertsActiveZone("zoneId")
     */
    alertsActiveZone(zoneId: AbvthecityWeatherGov.NwsZoneId, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.AlertCollectionGeoJson>;
    /**
     * Returns all alerts
     *
     * @param {AbvthecityWeatherGov.AlertsQueryRequest} request
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.alertsQuery()
     */
    alertsQuery(request?: AbvthecityWeatherGov.AlertsQueryRequest, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.AlertCollectionGeoJson>;
    /**
     * Returns a specific alert
     *
     * @param {AbvthecityWeatherGov.AlertId} id - Alert identifier
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.alertsSingle("id")
     */
    alertsSingle(id: AbvthecityWeatherGov.AlertId, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.AlertGeoJson>;
    /**
     * Returns a list of alert types
     *
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.alertsTypes()
     */
    alertsTypes(requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.AlertsTypesResponse>;
    /**
     * Returns a list of Center Weather Advisories from a CWSU
     *
     * @param {AbvthecityWeatherGov.NwsCenterWeatherServiceUnitId} cwsuId - NWS CWSU ID
     * @param {AbvthecityWeatherGov.Date_} date - Date (YYYY-MM-DD format)
     * @param {number} sequence - Sequence number
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.cwa("ZAB", "date", 1)
     */
    cwa(cwsuId: AbvthecityWeatherGov.NwsCenterWeatherServiceUnitId, date: AbvthecityWeatherGov.Date_, sequence: number, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.CenterWeatherAdvisoryGeoJson>;
    /**
     * Returns a list of Center Weather Advisories from a CWSU
     *
     * @param {AbvthecityWeatherGov.NwsCenterWeatherServiceUnitId} cwsuId - NWS CWSU ID
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.cwas("ZAB")
     */
    cwas(cwsuId: AbvthecityWeatherGov.NwsCenterWeatherServiceUnitId, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.CenterWeatherAdvisoryCollectionGeoJson>;
    /**
     * Returns metadata about a Center Weather Service Unit
     *
     * @param {AbvthecityWeatherGov.NwsCenterWeatherServiceUnitId} cwsuId - NWS CWSU ID
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.cwsu("ZAB")
     */
    cwsu(cwsuId: AbvthecityWeatherGov.NwsCenterWeatherServiceUnitId, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.CenterWeatherServiceUnitJsonLd>;
    /**
     * Returns glossary terms
     *
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.glossary()
     */
    glossary(requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.GlossaryResponse>;
    /**
     * Returns raw numerical forecast data for a 2.5km grid area
     *
     * @param {AbvthecityWeatherGov.NwsForecastOfficeId} wfo - Forecast office ID
     * @param {number} x - Forecast grid X coordinate
     * @param {number} y - Forecast grid Y coordinate
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.gridpoint("AKQ", 1, 1)
     */
    gridpoint(wfo: AbvthecityWeatherGov.NwsForecastOfficeId, x: number, y: number, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.GridpointGeoJson>;
    /**
     * Returns a textual forecast for a 2.5km grid area
     *
     * @param {AbvthecityWeatherGov.NwsForecastOfficeId} wfo - Forecast office ID
     * @param {number} x - Forecast grid X coordinate
     * @param {number} y - Forecast grid Y coordinate
     * @param {AbvthecityWeatherGov.GridpointForecastRequest} request
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.gridpointForecast("AKQ", 1, 1)
     */
    gridpointForecast(wfo: AbvthecityWeatherGov.NwsForecastOfficeId, x: number, y: number, request?: AbvthecityWeatherGov.GridpointForecastRequest, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.GridpointForecastGeoJson>;
    /**
     * Returns a textual hourly forecast for a 2.5km grid area
     *
     * @param {AbvthecityWeatherGov.NwsForecastOfficeId} wfo - Forecast office ID
     * @param {number} x - Forecast grid X coordinate
     * @param {number} y - Forecast grid Y coordinate
     * @param {AbvthecityWeatherGov.GridpointForecastHourlyRequest} request
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.gridpointForecastHourly("AKQ", 1, 1)
     */
    gridpointForecastHourly(wfo: AbvthecityWeatherGov.NwsForecastOfficeId, x: number, y: number, request?: AbvthecityWeatherGov.GridpointForecastHourlyRequest, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.GridpointForecastGeoJson>;
    /**
     * Returns a list of observation stations usable for a given 2.5km grid area
     *
     * @param {AbvthecityWeatherGov.NwsForecastOfficeId} wfo - Forecast office ID
     * @param {number} x - Forecast grid X coordinate
     * @param {number} y - Forecast grid Y coordinate
     * @param {AbvthecityWeatherGov.GridpointStationsRequest} request
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.gridpointStations("AKQ", 1, 1)
     */
    gridpointStations(wfo: AbvthecityWeatherGov.NwsForecastOfficeId, x: number, y: number, request?: AbvthecityWeatherGov.GridpointStationsRequest, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.ObservationStationCollectionGeoJson>;
    /**
     * Returns a forecast icon. Icon services in API are deprecated.
     */
    icons(first: string, set_: string, timeOfDay: string, request?: AbvthecityWeatherGov.IconsRequest, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<stream.Readable>;
    /**
     * Returns a list of icon codes and textual descriptions. Icon services in API are deprecated.
     *
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.iconsSummary()
     */
    iconsSummary(requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.IconsSummaryResponse>;
    /**
     * Returns a forecast icon. Icon services in API are deprecated.
     */
    iconsDualCondition(first: string, second: string, set_: string, timeOfDay: string, request?: AbvthecityWeatherGov.IconsDualConditionRequest, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<stream.Readable>;
    /**
     * Returns a list of valid text product types for a given issuance location
     *
     * @param {string} locationId - .
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.locationProducts("locationId")
     */
    locationProducts(locationId: string, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.TextProductTypeCollection>;
    /**
     * Returns metadata about a given observation station
     *
     * @param {string} stationId - Observation station ID
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.obsStation("stationId")
     */
    obsStation(stationId: string, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.ObservationStationGeoJson>;
    /**
     * Returns a list of observation stations.
     *
     * @param {AbvthecityWeatherGov.ObsStationsRequest} request
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.obsStations()
     */
    obsStations(request?: AbvthecityWeatherGov.ObsStationsRequest, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.ObservationStationCollectionGeoJson>;
    /**
     * Returns metadata about a NWS forecast office
     *
     * @param {AbvthecityWeatherGov.NwsOfficeId} officeId - NWS office ID
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.office("AKQ")
     */
    office(officeId: AbvthecityWeatherGov.NwsOfficeId, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.Office>;
    /**
     * Returns a specific news headline for a given NWS office
     *
     * @param {string} headlineId - Headline record ID
     * @param {AbvthecityWeatherGov.NwsOfficeId} officeId - NWS office ID
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.officeHeadline("headlineId", "AKQ")
     */
    officeHeadline(headlineId: string, officeId: AbvthecityWeatherGov.NwsOfficeId, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.OfficeHeadline>;
    /**
     * Returns a list of news headlines for a given NWS office
     *
     * @param {AbvthecityWeatherGov.NwsOfficeId} officeId - NWS office ID
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.officeHeadlines("AKQ")
     */
    officeHeadlines(officeId: AbvthecityWeatherGov.NwsOfficeId, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.OfficeHeadlineCollection>;
    /**
     * Returns metadata about a given latitude/longitude point
     *
     * @param {AbvthecityWeatherGov.PointString} point - Point (latitude, longitude)
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.point("point")
     */
    point(point: AbvthecityWeatherGov.PointString, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.PointGeoJson>;
    /**
     * Returns a list of observation stations for a given point
     *
     * @param {AbvthecityWeatherGov.PointString} point - Point (latitude, longitude)
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.pointStations("point")
     */
    pointStations(point: AbvthecityWeatherGov.PointString, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.ProblemDetail>;
    /**
     * Returns a specific text product
     *
     * @param {string} productId - .
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.product("productId")
     */
    product(productId: string, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.TextProduct>;
    /**
     * Returns a list of valid text product issuance locations
     *
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.productLocations()
     */
    productLocations(requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.TextProductLocationCollection>;
    /**
     * Returns a list of valid text product types and codes
     *
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.productTypes()
     */
    productTypes(requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.TextProductTypeCollection>;
    /**
     * Returns a list of text products
     *
     * @param {AbvthecityWeatherGov.ProductsQueryRequest} request
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.productsQuery()
     */
    productsQuery(request?: AbvthecityWeatherGov.ProductsQueryRequest, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.TextProductCollection>;
    /**
     * Returns a list of text products of a given type
     *
     * @param {string} typeId - .
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.productsType("typeId")
     */
    productsType(typeId: string, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.TextProductCollection>;
    /**
     * Returns a list of text products of a given type for a given issuance location
     *
     * @param {string} locationId - .
     * @param {string} typeId - .
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.productsTypeLocation("locationId", "typeId")
     */
    productsTypeLocation(locationId: string, typeId: string, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.TextProductCollection>;
    /**
     * Returns a list of valid text product issuance locations for a given product type
     *
     * @param {string} typeId - .
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.productsTypeLocations("typeId")
     */
    productsTypeLocations(typeId: string, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.TextProductLocationCollection>;
    /**
     * Returns metadata about a given radar wind profiler
     *
     * @param {string} stationId - Profiler station ID
     * @param {AbvthecityWeatherGov.RadarProfilerRequest} request
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.radarProfiler("stationId", {
     *         interval: "P2DT12H",
     *         time: "P1Y2M10DT2H30M/2008-05-11T15:30:00Z"
     *     })
     */
    radarProfiler(stationId: string, request?: AbvthecityWeatherGov.RadarProfilerRequest, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<unknown>;
    /**
     * Returns metadata about a given radar queue
     *
     * @param {string} host - LDM host
     * @param {AbvthecityWeatherGov.RadarQueueRequest} request
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.radarQueue("host", {
     *         arrived: "P1Y2M10DT2H30M/2008-05-11T15:30:00Z",
     *         created: "P1Y2M10DT2H30M/2008-05-11T15:30:00Z",
     *         published: "P1Y2M10DT2H30M/2008-05-11T15:30:00Z"
     *     })
     */
    radarQueue(host: string, request?: AbvthecityWeatherGov.RadarQueueRequest, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<unknown>;
    /**
     * Returns metadata about a given radar server
     *
     * @param {string} id - Server ID
     * @param {AbvthecityWeatherGov.RadarServerRequest} request
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.radarServer("id")
     */
    radarServer(id: string, request?: AbvthecityWeatherGov.RadarServerRequest, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<unknown>;
    /**
     * Returns a list of radar servers
     *
     * @param {AbvthecityWeatherGov.RadarServersRequest} request
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.radarServers()
     */
    radarServers(request?: AbvthecityWeatherGov.RadarServersRequest, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<unknown>;
    /**
     * Returns metadata about a given radar station
     *
     * @param {string} stationId - Radar station ID
     * @param {AbvthecityWeatherGov.RadarStationRequest} request
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.radarStation("stationId")
     */
    radarStation(stationId: string, request?: AbvthecityWeatherGov.RadarStationRequest, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<unknown>;
    /**
     * Returns metadata about a given radar station alarms
     *
     * @param {string} stationId - Radar station ID
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.radarStationAlarms("stationId")
     */
    radarStationAlarms(stationId: string, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<unknown>;
    /**
     * Returns a list of radar stations
     *
     * @param {AbvthecityWeatherGov.RadarStationsRequest} request
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.radarStations()
     */
    radarStations(request?: AbvthecityWeatherGov.RadarStationsRequest, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<unknown>;
    /**
     * Returns a thumbnail image for a satellite region. Image services in API are deprecated.
     */
    satelliteThumbnails(area: AbvthecityWeatherGov.SatelliteThumbnailsRequestArea, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<stream.Readable>;
    /**
     * Returns a specific SIGMET/AIRMET
     *
     * @param {AbvthecityWeatherGov.AtsuIdentifier} atsu - ATSU identifier
     * @param {AbvthecityWeatherGov.Date_} date - Date (YYYY-MM-DD format)
     * @param {AbvthecityWeatherGov.Time} time - Time (HHMM format). This time is always specified in UTC (Zulu) time.
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.sigmet("atsu", "date", "time")
     */
    sigmet(atsu: AbvthecityWeatherGov.AtsuIdentifier, date: AbvthecityWeatherGov.Date_, time: AbvthecityWeatherGov.Time, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.SigmetGeoJson>;
    /**
     * Returns a list of SIGMET/AIRMETs
     *
     * @param {AbvthecityWeatherGov.SigmetQueryRequest} request
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.sigmetQuery()
     */
    sigmetQuery(request?: AbvthecityWeatherGov.SigmetQueryRequest, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.SigmetCollectionGeoJson>;
    /**
     * Returns a list of SIGMET/AIRMETs for the specified ATSU
     *
     * @param {AbvthecityWeatherGov.AtsuIdentifier} atsu - ATSU identifier
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.sigmetsByAtsu("atsu")
     */
    sigmetsByAtsu(atsu: AbvthecityWeatherGov.AtsuIdentifier, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.SigmetCollectionGeoJson>;
    /**
     * Returns a list of SIGMET/AIRMETs for the specified ATSU for the specified date
     *
     * @param {AbvthecityWeatherGov.AtsuIdentifier} atsu - ATSU identifier
     * @param {AbvthecityWeatherGov.Date_} date - Date (YYYY-MM-DD format)
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.sigmetsByAtsuByDate("atsu", "date")
     */
    sigmetsByAtsuByDate(atsu: AbvthecityWeatherGov.AtsuIdentifier, date: AbvthecityWeatherGov.Date_, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.SigmetCollectionGeoJson>;
    /**
     * Returns the latest observation for a station
     *
     * @param {string} stationId - Observation station ID
     * @param {AbvthecityWeatherGov.StationObservationLatestRequest} request
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.stationObservationLatest("stationId")
     */
    stationObservationLatest(stationId: string, request?: AbvthecityWeatherGov.StationObservationLatestRequest, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.ObservationGeoJson>;
    /**
     * Returns a list of observations for a given station
     *
     * @param {string} stationId - Observation station ID
     * @param {AbvthecityWeatherGov.StationObservationListRequest} request
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.stationObservationList("stationId")
     */
    stationObservationList(stationId: string, request?: AbvthecityWeatherGov.StationObservationListRequest, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.ObservationCollectionGeoJson>;
    /**
     * Returns a single observation.
     *
     * @param {string} stationId - Observation station ID
     * @param {string} time - Timestamp of requested observation
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.stationObservationTime("stationId", "2024-01-15T09:30:00Z")
     */
    stationObservationTime(stationId: string, time: string, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.ObservationGeoJson>;
    /**
     * Returns a single Terminal Aerodrome Forecast.
     *
     * @param {AbvthecityWeatherGov.Date_} date - Date (YYYY-MM-DD format)
     * @param {string} stationId - Observation station ID
     * @param {AbvthecityWeatherGov.Time} time - Time (HHMM format). This time is always specified in UTC (Zulu) time.
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.taf("date", "stationId", "time")
     */
    taf(date: AbvthecityWeatherGov.Date_, stationId: string, time: AbvthecityWeatherGov.Time, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<void>;
    /**
     * Returns Terminal Aerodrome Forecasts for the specified airport station.
     *
     * @param {string} stationId - Observation station ID
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tafs("stationId")
     */
    tafs(stationId: string, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<unknown>;
    /**
     * Returns metadata about a given zone
     *
     * @param {AbvthecityWeatherGov.NwsZoneType} type_ - Zone type
     * @param {AbvthecityWeatherGov.NwsZoneId} zoneId - NWS public zone/county identifier
     * @param {AbvthecityWeatherGov.ZoneRequest} request
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.zone("land", "zoneId")
     */
    zone(type_: AbvthecityWeatherGov.NwsZoneType, zoneId: AbvthecityWeatherGov.NwsZoneId, request?: AbvthecityWeatherGov.ZoneRequest, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.ZoneGeoJson>;
    /**
     * Returns the current zone forecast for a given zone
     *
     * @param {string} type_ - Zone type
     * @param {AbvthecityWeatherGov.NwsZoneId} zoneId - NWS public zone/county identifier
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.zoneForecast("type", "zoneId")
     */
    zoneForecast(type_: string, zoneId: AbvthecityWeatherGov.NwsZoneId, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.ZoneForecastGeoJson>;
    /**
     * Returns a list of zones
     *
     * @param {AbvthecityWeatherGov.ZoneListRequest} request
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.zoneList()
     */
    zoneList(request?: AbvthecityWeatherGov.ZoneListRequest, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.ZoneCollectionGeoJson>;
    /**
     * Returns a list of zones of a given type
     *
     * @param {AbvthecityWeatherGov.NwsZoneType} type_ - Zone type
     * @param {AbvthecityWeatherGov.ZoneListTypeRequest} request
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.zoneListType("land")
     */
    zoneListType(type_: AbvthecityWeatherGov.NwsZoneType, request?: AbvthecityWeatherGov.ZoneListTypeRequest, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.ZoneCollectionGeoJson>;
    /**
     * Returns a list of observations for a given zone
     *
     * @param {AbvthecityWeatherGov.NwsZoneId} zoneId - NWS public zone/county identifier
     * @param {AbvthecityWeatherGov.ZoneObsRequest} request
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.zoneObs("zoneId")
     */
    zoneObs(zoneId: AbvthecityWeatherGov.NwsZoneId, request?: AbvthecityWeatherGov.ZoneObsRequest, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.ObservationCollectionGeoJson>;
    /**
     * Returns a list of observation stations for a given zone
     *
     * @param {AbvthecityWeatherGov.NwsZoneId} zoneId - NWS public zone/county identifier
     * @param {AbvthecityWeatherGov.ZoneStationsRequest} request
     * @param {AbvthecityWeatherGovClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.zoneStations("zoneId")
     */
    zoneStations(zoneId: AbvthecityWeatherGov.NwsZoneId, request?: AbvthecityWeatherGov.ZoneStationsRequest, requestOptions?: AbvthecityWeatherGovClient.RequestOptions): Promise<AbvthecityWeatherGov.ObservationStationCollectionGeoJson>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        "User-Agent": string;
    }>;
}
